setwd("C:/Kaggle/titanic")
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test=read.csv("test.csv", stringsAsFactors=FALSE)
TitanicTrain= read.csv("train.csv")
TitanicTest = read.csv("test.csv")

#Analyzing Data 
str(train)
plot(train$Sex , train$Survived)
table(train$Sex , train$Survived)
prop.table(train$Sex , train$Survived)
?prop.table
table(train$Pclass , train$Survived)
fix(train)
summary(train)

table(train$Survived)
prop.table(table(train$Survived))

#Since we see that most people died in training set we get our baseline prediction for test set that everyone there too dies 
test$Survived <- rep(0,418) #repeats something for as many times as you tell it to .

#id and Survived are the only two things you need to submit to kaggle . so we're making a new dataframe and writing it to a file 
submit <- data.frame( PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit , file="theyallperished.csv", row.names = FALSE)

#The data.frame command has created a new dataframe with the headings consistent with those from the test set, 
#go ahead and take a look by previewing it. The write.csv command has sent that dataframe out to a CSV file, 
#and importantly excluded the row numbers that would cause Kaggle to reject our submission.


#Gender-class model
table(train$Sex)
prop.table(table(train$Sex,train$Survived))

#Now Let's start digging in the age variable 

summary(train$Age)
train$Child <- 0
train$Child[train$Age < 18] <- 1
#you will see that any passengers with an age of NA have been assigned a zero, this is because the NA will fail any boolean test. This is what we wanted though, since we had decided to use the average age, which was an adult.
aggregate( Survived ~ Child + Sex ,data = train, FUN=sum)
#
#The aggregate command takes a formula with the target variable on the left hand side of the tilde symbol and the variables to subset over on the right. We then tell it which dataframe to look at with the data argument, and finally what function to apply to these subsets.


#We need to create a function that takes the subset vector as input and applies both the sum and length commands to it, 
#and then does the division to give us a proportion. Here is the syntax:
aggregate(Survived ~ Child + Sex ,data = train, FUN= function(x){sum(x)/length(x)})

train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
#Class 3 Females also didn't survive much as seen in the aggregate above
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0

#FEATURE engineering 
test$Survived <- NA
combi <- rbind(TitanicTrain, test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
#strsplit, which stands for string split, to break apart our original name over these two symbols(, and .) Let’s try it out on Mr. #Braund:
strsplit(combi$Name[1], split='[,.]')
#Okay, good. Here we have sent strsplit the cell of interest, and given it some symbols to chose from when splitting the string up, either a comma or period. Those symbols in the square brackets are called regular expressions, though this is a very simple one, and if you plan on working with a lot of text I would certainly recommend getting used to using them!
#Now, To extract just "Mr" we do this .. since strsplit is a doubly stacked container 
strsplit(combi$Name[1], split='[,.]')[[1]][2]
#Now to extract title from every row 
combi$Title <- sapply(combi$Name, FUN=function(x){strsplit(x, split='[,.]')[[1]][2]})
#Finally, we may wish to strip off those spaces from the beginning of the titles. Here we can just substitute the first occurrence of a space with nothing. We can use sub for this (gsub would replace all spaces, poor ‘the Countess’ would look strange then though):
combi$Title <- sub('','',combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mlle','Mme')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
famID <- data.frame(table(combi$FamilyID))
famID <- famID[famID$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famID$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)

train <- combi[1:891,]
test <- combi[892:1309,]
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID ,
             data=train, method="class")
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "myseconfdtree.csv", row.names = FALSE)

#Party

library(party)
set.seed(415)
#fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
 #              data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
#Prediction <- predict(fit, test, OOB=TRUE, type = "response")
#submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
#write.csv(submit, file = "secondforest.csv", row.names = FALSE)

fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +Ticket+ Embarked + Title + FamilySize + FamilyID,
               data = train, controls=cforest_unbiased(ntree=2500, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "secondforest.csv", row.names = FALSE)


