### INITIALIZE ###
setwd("C:/Users/anagha.j/Titanic")

######################################################################################################




### LIBRARY CALL ###
library("rpart")
#library("rpart.plot")	
library(randomForest)
library(party)
#library("rattle")

######################################################################################################



### READING DATA ###
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test=read.csv("test.csv", stringsAsFactors=FALSE)
test$Survived <- 0

#Backup.................
titanicTrain = train
titanicTest = test
#......................
#######################################################################################################



### CLEANING DATA ###
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
strsplit(combi$Name[1], split='[,.]')
strsplit(combi$Name[1], split='[,.]')[[1]]
strsplit(combi$Name[1], split='[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
combi$Title[combi$PassengerId == 797] <- 'Mrs' # female doctor
combi$Title[combi$Title %in% c('Lady', 'the Countess', 'Mlle', 'Mee', 'Ms')] <- 'Miss'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Col', 'Jonkheer', 'Rev', 'Dr', 'Master')] <- 'Mr'
combi$Title[combi$Title %in% c('Dona')] <- 'Mrs'
combi$Title <- factor(combi$Title)

# Passenger on row 62 and 830 do not have a value for embarkment. 
# Since many passengers embarked at Southampton, we give them the value S.
# We code all embarkment codes as factors.
combi$Embarked[c(62,830)] = "S"
combi$Embarked <- factor(combi$Embarked)

# Passenger on row 1044 has an NA Fare value. Let's replace it with the median fare value.
combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)

### FEATURE ENGINEERING ####..........................................................................
# Create new column -> family_size
combi$family_size <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name , FUN=function(x){strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$family_size) , combi$Surname , sep = "")
famID <- data.frame(table(combi$FamilyID))
famID <- famID[famID$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famID$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- factor(combi$FamilyID2)

#......................................................................................................

# How to fill in missing Age values?
# We make a prediction of a passengers Age using the other variables and a decision tree model. 
# This time you give method="anova" since you are predicting a continuous variable.

predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
                       data=combi[!is.na(combi$Age),], method="anova")
combi$Age[is.na(combi$Age)] <- predict(predicted_age, combi[is.na(combi$Age),])


#######################################################################################################

#Convert All to factor 
combi$Survived <-  factor(combi$Survived)
combi$Title <-  factor(combi$Title)
combi$Sex <- factor(combi$Sex)
combi$Sex <- factor(combi$Sex)
combi$Cabin <- factor(combi$Cabin)
combi$Surname <- factor(combi$Surname)
combi$Ticket <- factor(combi$Ticket)



### CREATING MODEL ###

train_new <- combi[1:891,]
test_new <- combi[892:1309,]

test_new$Survived <- NULL

# train_new and test_new are available in the workspace
str(train_new)
str(test_new)

fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Ticket + family_size + FamilyID,
               data = train_new, controls=cforest_unbiased(ntree=2500, mtry=3))
Prediction <- predict(fit, test_new, OOB=TRUE, type = "response")
#################################################################################################



### SUBMIT TO KAGGLE ###
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "formattedcforest.csv", row.names = FALSE)

###############################################################################################

