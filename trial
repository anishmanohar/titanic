rm(list=ls())
setwd("C:/Users/Anish/Desktop/Kaggle")
Titanictest = read.csv("test.csv",header = TRUE, stringsAsFactors = FALSE)
Titanictrain=read.csv("train.csv",header = TRUE, stringsAsFactors = FALSE)
test = Titanictest
train = Titanictrain
test$Survived = NA
#Combining test and train
combi = rbind(test,train)


##Getting indices of all people with same surname in separate vectors
vec = list()
x=array()
y=array()
for(i in 1:nrow(combi))
{
  x[i]= combi$Name[i]
  y[i] = substr(x[i],1,regexpr(",",x[i])-1)
  vec[[i]] = grep(y[i],combi$Name,fixed = TRUE)
}
vec1 = unique(vec)


##### Replacing names with only Mr,Miss,Mrs and Dr
master_vector = grep("Master.",combi$Name, fixed=TRUE)
miss_vector = grep("Miss.", combi$Name, fixed=TRUE)
mrs_vector = grep("Mrs.", combi$Name, fixed=TRUE)
mr_vector = grep("Mr.", combi$Name, fixed=TRUE)
dr_vector = grep("Dr.", combi$Name, fixed=TRUE)

rev_vector = grep("Rev.",combi$Name, fixed=TRUE)
don_vector = grep("Don.",combi$Name, fixed=TRUE)
dona = grep("Dona.",combi$Name, fixed=TRUE)
major_vector = grep("Major.",combi$Name, fixed=TRUE)
sir_vector = grep("Sir.",combi$Name, fixed=TRUE)
col_vector = grep("Col.",combi$Name, fixed=TRUE)
capt_vector = grep("Capt.",combi$Name, fixed=TRUE)
jonkheer_vector = grep("Jonkheer.",combi$Name, fixed=TRUE)
mme_vector = grep("Mme.",combi$Name, fixed=TRUE)
ms_vector = grep("Ms.",combi$Name, fixed=TRUE)
lady_vector = grep("Lady.",combi$Name, fixed=TRUE)
mlle_vector = grep("Mlle.",combi$Name, fixed=TRUE)
countess_vector = grep("Countess.",combi$Name, fixed=TRUE)

#Combining all
mr_vector = c(mr_vector,rev_vector,don_vector,major_vector,sir_vector,col_vector,capt_vector,jonkheer_vector)
miss_vector=c(miss_vector,ms_vector,mlle_vector)
mrs_vector=c(mrs_vector,mme_vector,lady_vector,countess_vector)
mrs_vector=c(mrs_vector,dona)
#Replacing
for(i in master_vector)
{
  combi$Name[i]="Master"
}
for(i in miss_vector)
{
  combi$Name[i]="Miss"
}
for(i in  mrs_vector)
{
  combi$Name[i]="Mrs"
}
for(i in mr_vector)
{
  combi$Name[i]="Mr"
}
for(i in dr_vector)
{
  combi$Name[i]="Dr"
}


###Assign a number to each family
combi$FamilyNumber = NA
for(i in 1:length(vec1))
{
  for(n in 1:length(vec1[[i]]))
  {
    combi$FamilyNumber[vec1[[i]][n]] = i
  }
}

####Averaging the age to fill NAs
master_age = round(mean(combi$Age[combi$Name == "Master"], na.rm = TRUE), digits = 2)
miss_age = round(mean(combi$Age[combi$Name == "Miss"], na.rm = TRUE), digits =2)
mrs_age = round(mean(combi$Age[combi$Name == "Mrs"], na.rm = TRUE), digits = 2)
mr_age = round(mean(combi$Age[combi$Name == "Mr"], na.rm = TRUE), digits = 2)
dr_age = round(mean(combi$Age[combi$Name == "Dr"], na.rm = TRUE), digits = 2)

for (i in 1:nrow(combi)) {
  if (is.na(combi[i,5])) {
    if (combi$Name[i] == "Master") {
      combi$Age[i] = master_age
    } else if (combi$Name[i] == "Miss") {
      combi$Age[i] = miss_age
    } else if (combi$Name[i] == "Mrs") {
      combi$Age[i] = mrs_age
    } else if (combi$Name[i] == "Mr") {
      combi$Age[i] = mr_age
    } else if (combi$Name[i] == "Dr") {
      combi$Age[i] = dr_age
    } else {
      print("Uncaught Title")
    }
  }
}



###Check if child
for (i in 1:nrow(combi)) {
  if (combi$Age[i] <= 12) {
    combi$Child[i] = 1
  } else {
    combi$Child[i] = 2
  }
}
table(combi$Survived,combi$Child)


##Check if mother or not
for(i in 1:nrow(combi)) {
  if(combi$Name[i] == "Mrs" & combi$Parch[i] > 0) {
    combi$Mother[i] = 1
  } else {
    combi$Mother[i] = 2
  }
}

for(i in 1:nrow(combi)) {
  x = combi$SibSp[i]
  y = combi$Parch[i]
  combi$Family[i] = x + y + 1
}


#plot(combi$Ticket,combi$Survived)


### separating test and train
temptest = combi[1:418,]
temptrain = combi[419:1309,]

#######Random Forest
install.packages("party")
library(party)
train1 = cforest(Survived ~ Pclass + as.factor(Name) +as.factor(Sex) + Age + Child + Family + FamilyNumber + Mother,data = temptrain)
####Logistic model gives a better result
train2 = glm(Survived ~ Pclass + Name +Sex + Sex*Pclass+ Family+ SibSp + Parch+ Age + Child + FamilyNumber + Mother,data = temptrain)
predictions =  predict(train1,newdata = temptest)
predictions2 = predict(train2,type = "response",newdata = temptest)

#####Applying Threshold
survival <- vector()
for(i in 1:length(predictions2)) {
  if(predictions2[i] > .5) {
    survival[i] <- 1
  } else {
    survival[i] <- 0
  }
}

MySubmission = data.frame(PassengerId = temptest$PassengerId, Survived = survival)

write.csv(MySubmission, "kaggle6.csv", row.names=FALSE)
plot(combi$Survived,combi$Cabin)
